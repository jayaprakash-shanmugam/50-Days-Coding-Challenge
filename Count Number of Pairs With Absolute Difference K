[PROBLEM] : Given a 0-indexed integer array nums of length n and an integer k, return the number of pairs (i, j) where 0 <= i < j < n, such that nums[i] == nums[j] and (i * j) is divisible by k.

Input: nums = [3,1,2,2,2,1,3], k = 2
Output: 4
Explanation:
There are 4 pairs that meet all the requirements:
- nums[0] == nums[6], and 0 * 6 == 0, which is divisible by 2.
- nums[2] == nums[3], and 2 * 3 == 6, which is divisible by 2.
- nums[2] == nums[4], and 2 * 4 == 8, which is divisible by 2.
- nums[3] == nums[4], and 3 * 4 == 12, which is divisible by 2.

SOLUTION [JAVA] : 

import java.util.*;
class HelloWorld {
    public int countPairs(int[] nums, int k) 
    {
        int count=0;
        for(int i=0;i<nums.length-1;i++)
        {
            for(int j=i+1;j<nums.length;j++)
            {
                if(nums[i]==nums[j] && ((i*j)%k)==0)
                {
                    count++;
                    // break;
                }
            }
        }    
        return count;
    }
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        System.out.println("size of array");
        int size1=sc.nextInt();
        System.out.println("enter array values");
        int[] arr1=new int[size];
        for(int i=0;i<size;i++)
        {
            arr1[i]=sc.nextInt();
        }
        System.out.println("k value");
        int k=sc.nextInt();
        int ans=countPairs(arr1,n);
        System.out.println(ans);
    }
}
